# Adds two numbers inefficiently
fn add1(x: i32, i: scalar i32) -> i32
{
    let mut amount = 0i32;
    amount = %add(amount, i);
    return %add(x, amount);
}

# Adds two numbers inefficiently
fn add2(a: i32, b: i32) -> i32
{
    let mut sum = %add(a, b);
    {
        sum = add1(sum, 1i32);
    }
    return %sub(sum, 1i32);
}

# Tuple test
fn tup(a: i32, b: i32) -> (i32, i32)
{
    let mut c = (a, b);
    let (mut d, e) = c;
    return (a, b);
}
